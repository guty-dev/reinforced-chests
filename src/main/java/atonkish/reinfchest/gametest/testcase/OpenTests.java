package atonkish.reinfchest.gametest.testcase;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

import net.fabricmc.fabric.api.gametest.v1.FabricGameTest;

import net.minecraft.server.network.ServerPlayerEntity;
import net.minecraft.stat.Stat;
import net.minecraft.stat.Stats;
import net.minecraft.test.StructureTestUtil;
import net.minecraft.test.TestFunction;
import net.minecraft.util.Identifier;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;
import net.minecraft.world.GameMode;

import atonkish.reinfchest.ReinforcedChestsMod;
import atonkish.reinfchest.block.ModBlocks;
import atonkish.reinfchest.block.ReinforcedChestBlock;
import atonkish.reinfchest.gametest.util.MockServerPlayerHelper;
import atonkish.reinfchest.stat.ModStats;
import atonkish.reinfcore.util.ReinforcingMaterials;

public class OpenTests {
    private static final String BATCH_ID = String.format("%s:OpenBatch",
            ReinforcedChestsMod.MOD_ID);

    public static final Collection<TestFunction> TEST_FUNCTIONS = new ArrayList<>() {
        {
            // Copper Chest
            add(OpenTests.createTest(
                    "Open Copper Chest",
                    (ReinforcedChestBlock) ModBlocks.REINFORCED_CHEST_MAP
                            .get(ReinforcingMaterials.MAP.get("copper"))));

            // Iron Chest
            add(OpenTests.createTest(
                    "Open Iron Chest",
                    (ReinforcedChestBlock) ModBlocks.REINFORCED_CHEST_MAP
                            .get(ReinforcingMaterials.MAP.get("iron"))));

            // Gold Chest
            add(OpenTests.createTest(
                    "Open Gold Chest",
                    (ReinforcedChestBlock) ModBlocks.REINFORCED_CHEST_MAP
                            .get(ReinforcingMaterials.MAP.get("gold"))));

            // Diamond Chest
            add(OpenTests.createTest(
                    "Open Diamond Chest",
                    (ReinforcedChestBlock) ModBlocks.REINFORCED_CHEST_MAP
                            .get(ReinforcingMaterials.MAP.get("diamond"))));

            // Netherite Chest
            add(OpenTests.createTest(
                    "Open Netherite Chest",
                    (ReinforcedChestBlock) ModBlocks.REINFORCED_CHEST_MAP
                            .get(ReinforcingMaterials.MAP.get("netherite"))));
        }
    };

    private static TestFunction createTest(String name, ReinforcedChestBlock chestBlock) {
        String testName = String.format("%s %s %s",
                ReinforcedChestsMod.MOD_ID,
                OpenTests.class.getSimpleName(),
                name)
                .replace(" ", "_");

        return new TestFunction(
                OpenTests.BATCH_ID,
                testName,
                FabricGameTest.EMPTY_STRUCTURE,
                StructureTestUtil.getRotation(0),
                100,
                0L,
                true,
                false,
                1,
                1,
                false,
                (context) -> {
                    // Arrange
                    BlockPos blockPos = BlockPos.ORIGIN;
                    context.setBlockState(blockPos, chestBlock);

                    ServerPlayerEntity player = MockServerPlayerHelper.spawn(context,
                            GameMode.SURVIVAL, Vec3d.of(blockPos.south(4)));

                    Stat<Identifier> stat = Stats.CUSTOM
                            .getOrCreateStat(ModStats.OPEN_REINFORCED_CHEST_MAP.get(chestBlock.getMaterial()));

                    // Act
                    CompletableFuture<Void> futurePartialAct1 = new CompletableFuture<>();
                    CompletableFuture<Void> futurePartialAct2 = new CompletableFuture<>();

                    Map<String, Integer> statMap = new HashMap<String, Integer>();
                    String statMapKeyBeforeOpening = "beforeOpening";
                    String statMapKeyAfterOpening = "afterOpening";

                    long tickOrigin = 0;
                    context.runAtTick(tickOrigin, () -> {
                        statMap.put(statMapKeyBeforeOpening, player.getStatHandler().getStat(stat));

                        context.useBlock(blockPos, player);

                        futurePartialAct1.complete(null);
                    });

                    long tickChestOpening = 1;
                    context.runAtTick(tickChestOpening, () -> {
                        statMap.put(statMapKeyAfterOpening, player.getStatHandler().getStat(stat));

                        futurePartialAct2.complete(null);
                    });

                    // Assert
                    CompletableFuture.allOf(futurePartialAct1, futurePartialAct2).thenRun(() -> {
                        try {
                            context.assertEquals(
                                    statMap.get(statMapKeyAfterOpening) - statMap.get(statMapKeyBeforeOpening), 1,
                                    String.format("diff %s value", stat.getName()));
                        } catch (Exception e) {
                            ReinforcedChestsMod.LOGGER.error("[{}] {}", testName, e.getMessage());
                            throw e;
                        } finally {
                            MockServerPlayerHelper.destroy(context, player);
                        }

                        context.complete();
                    });
                });
    }
}
